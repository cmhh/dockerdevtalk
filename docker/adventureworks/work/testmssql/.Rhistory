cbind,
lapply(
rep(n, length(years)),
function(x) rnorm(x, 100))
)
)
setnames(
dt, colnames(dt), gsub(".V", "", colnames(dt), fixed = TRUE)
)
# summary via data.table -------------------------------------------------------
(t0 <- system.time({
res0 <- dt[, .(n = sum(ind1)), by = list(year, g1)]
}))
t0
res0
# write to SQL Server ----------------------------------------------------------
system.time({
DBI::dbWriteTable(conn, "test", dt)
})
DBI::dbDisconnect(conn)
rm(list=ls())
rJava::.jinit(parameters = "-Xmx1g")
library(RJDBC)
if (!require(dbplyr)) renv::install("dbplyr")
library(dplyr)
library(data.table)
# connect to SQL Server --------------------------------------------------------
ip <- "172.17.0.4"
p <- "jar/mssql-jdbc-8.4.1.jre8.jar"
drv <- RJDBC::JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver" , p)
conn <- DBI::dbConnect(
drv,
sprintf(
"jdbc:sqlserver://%s:%d;databaseName=%s;username=%s;password=%s",
ip, 1433, "tempdb", "sa", "password-1234"
)
)
# test the connection
cat(DBI::dbGetQuery(conn, "select @@version")[1,1])
# make test dataset ------------------------------------------------------------
n <- 1000000
years <- 2015:2020
bins <- 10
dt <- data.table(
year = rep(years, each = n),
id = rep(1:n, length(years)),
g1 = ceiling(runif(n * length(years)) * 2),
g2 = ceiling(runif(n * length(years)) * 5),
ind = do.call(
cbind,
lapply(
rep(n, length(years)),
function(x) as(runif(x) <= 0.1, "integer")
)
),
X = do.call(
cbind,
lapply(
rep(n, length(years)),
function(x) rnorm(x, 100))
)
)
setnames(
dt, colnames(dt), gsub(".V", "", colnames(dt), fixed = TRUE)
)
# summary via data.table -------------------------------------------------------
(t0 <- system.time({
res0 <- dt[, .(n = sum(ind1)), by = list(year, g1)]
}))
# write to SQL Server ----------------------------------------------------------
system.time({
DBI::dbWriteTable(conn, "test", dt)
})
DBI::dbExecute(conn, "drop table test")
# write to SQL Server ----------------------------------------------------------
system.time({
DBI::dbWriteTable(conn, "test", dt)
})
# summary via SQL Server -------------------------------------------------------
(t1 <- system.time({
res1 <- tbl(conn, "test") %>%
group_by(year, g1) %>%
summarise(n = sum(ind1)) %>%
arrange(year, g1) %>%
collect()
}))
res0
res1
# summary via SQL Server with columnstore index --------------------------------
query <- "create clustered index ic1 on test (year, id, g1, g2)"
DBI::dbSendQuery(conn, query)
(t2 <- system.time({
res2 <- tbl(conn, "test") %>%
group_by(year, g1) %>%
summarise(n = sum(ind1)) %>%
arrange(year, g1) %>%
collect()
}))
t1
t2
t0
# tidy up ----------------------------------------------------------------------
DBI::dbSendQuery(conn, "drop table test")
DBI::dbDisconnect(conn)
rm(list=ls())
renv::install("rJava")
renv::install("RJDBC")
renv::install("dplyr")
renv::install("dbplyr")
renv::install("data.table")
rJava::.jinit(parameters = "-Xmx1g")
library(RJDBC)
if (!require(dbplyr)) renv::install("dbplyr")
library(dplyr)
library(data.table)
# connect to SQL Server --------------------------------------------------------
ip <- "172.17.0.2"
p <- "jar/mssql-jdbc-8.4.1.jre8.jar"
drv <- RJDBC::JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver" , p)
conn <- DBI::dbConnect(
drv,
sprintf(
"jdbc:sqlserver://%s:%d;databaseName=%s;username=%s;password=%s",
ip, 1433, "tempdb", "sa", "password-1234"
)
)
# test the connection
cat(DBI::dbGetQuery(conn, "select @@version")[1,1])
# make test dataset ------------------------------------------------------------
n <- 100000
years <- 2015:2020
bins <- 10
dt <- data.table(
year = rep(years, each = n),
id = rep(1:n, length(years)),
g1 = ceiling(runif(n * length(years)) * 2),
g2 = ceiling(runif(n * length(years)) * 5),
ind = do.call(
cbind,
lapply(
rep(n, length(years)),
function(x) as(runif(x) <= 0.1, "integer")
)
),
X = do.call(
cbind,
lapply(
rep(n, length(years)),
function(x) rnorm(x, 100))
)
)
setnames(
dt, colnames(dt), gsub(".V", "", colnames(dt), fixed = TRUE)
)
# summary via data.table -------------------------------------------------------
(t0 <- system.time({
res0 <- dt[, .(n = sum(ind1)), by = list(year, g1)]
}))
# write to SQL Server ----------------------------------------------------------
system.time({
DBI::dbWriteTable(conn, "test", dt)
})
# summary via SQL Server -------------------------------------------------------
(t1 <- system.time({
res1 <- tbl(conn, "test") %>%
group_by(year, g1) %>%
summarise(n = sum(ind1)) %>%
arrange(year, g1) %>%
collect()
}))
# summary via SQL Server with columnstore index --------------------------------
query <- "create clustered index ic1 on test (year, id, g1, g2)"
DBI::dbSendQuery(conn, query)
(t2 <- system.time({
res2 <- tbl(conn, "test") %>%
group_by(year, g1) %>%
summarise(n = sum(ind1)) %>%
arrange(year, g1) %>%
collect()
}))
# tidy up ----------------------------------------------------------------------
DBI::dbSendQuery(conn, "drop table test")
DBI::dbDisconnect(conn)
rm(list=ls())
rJava::.jinit(parameters = "-Xmx1g")
library(RJDBC)
library(dplyr)
# connect to SQL Server --------------------------------------------------------
ip <- "172.17.0.2"
p <- "jar/mssql-jdbc-8.4.1.jre8.jar"
drv <- RJDBC::JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver" , p)
conn <- DBI::dbConnect(
drv,
sprintf(
"jdbc:sqlserver://%s:%d;databaseName=%s;username=%s;password=%s",
ip, 1433, "adventureworks", "sa", "password-1234"
)
)
DBI::dbListTables(conn)
DBI::dbListObjects(conn)
DBI::dbListTables(conn, "SalesLT")
?tbl
address <- tbl(conn, c("SalesLT", "Address"))
address <- tbl(conn, dbplyr::in_schema("SalesLT", "Address"))
head(address, 10)
address <- tbl(conn, dbplyr::in_schema("SalesLT", "Address")) %>% collect
head(address)
View(address)
rJava::.jinit(parameters = "-Xmx1g")
library(RJDBC)
library(dplyr)
# connect to SQL Server --------------------------------------------------------
ip <- "172.17.0.2"
p <- "jar/mssql-jdbc-8.4.1.jre8.jar"
drv <- RJDBC::JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver" , p)
conn <- DBI::dbConnect(
drv,
sprintf(
"jdbc:sqlserver://%s:%d;databaseName=%s;username=%s;password=%s",
ip, 1433, "adventureworks", "sa", "password-1234"
)
)
address <- tbl(conn, dbplyr::in_schema("SalesLT", "Address")) %>% collect
View(address)
library(RJDBC)
library(dplyr)
# connect to SQL Server --------------------------------------------------------
ip <- "172.17.0.2"
p <- "jar/mssql-jdbc-8.4.1.jre8.jar"
drv <- RJDBC::JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver" , p)
conn <- DBI::dbConnect(
drv,
sprintf(
"jdbc:sqlserver://%s:%d;databaseName=%s;username=%s;password=%s",
ip, 1433, "adventureworks", "sa", "password-1234"
)
)
address <- tbl(conn, dbplyr::in_schema("SalesLT", "Address")) %>% collect
View(address)
library(RJDBC)
library(dplyr)
# connect to SQL Server --------------------------------------------------------
ip <- "172.17.0.2"
p <- "jar/mssql-jdbc-8.4.1.jre8.jar"
drv <- RJDBC::JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver" , p)
conn <- DBI::dbConnect(
drv,
sprintf(
"jdbc:sqlserver://%s:%d;databaseName=%s;username=%s;password=%s",
ip, 1433, "adventureworks", "sa", "password-1234"
)
)
# extract address table --------------------------------------------------------
address <- tbl(conn, dbplyr::in_schema("SalesLT", "Address")) %>% collect
View(address)
rJava::.jinit(parameters = "-Xmx1g")
library(RJDBC)
library(dplyr)
# connect to SQL Server --------------------------------------------------------
ip <- "172.17.0.3"
p <- "jar/mssql-jdbc-8.4.1.jre8.jar"
drv <- RJDBC::JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver" , p)
conn <- DBI::dbConnect(
drv,
sprintf(
"jdbc:sqlserver://%s:%d;databaseName=%s;username=%s;password=%s",
ip, 1433, "adventureworks", "sa", "password-1234"
)
)
# extract address table --------------------------------------------------------
address <- tbl(conn, dbplyr::in_schema("SalesLT", "Address")) %>% collect
View(address)
rJava::.jinit(parameters = "-Xmx1g")
library(RJDBC)
library(dplyr)
# connect to SQL Server --------------------------------------------------------
ip <- "localhost"
p <- "jar/mssql-jdbc-8.4.1.jre8.jar"
drv <- RJDBC::JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver" , p)
conn <- DBI::dbConnect(
drv,
sprintf(
"jdbc:sqlserver://%s:%d;databaseName=%s;username=%s;password=%s",
ip, 1433, "adventureworks", "sa", "password-1234"
)
)
# connect to SQL Server --------------------------------------------------------
ip <- "database"
p <- "jar/mssql-jdbc-8.4.1.jre8.jar"
drv <- RJDBC::JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver" , p)
conn <- DBI::dbConnect(
drv,
sprintf(
"jdbc:sqlserver://%s:%d;databaseName=%s;username=%s;password=%s",
ip, 1433, "adventureworks", "sa", "password-1234"
)
)
# extract address table --------------------------------------------------------
address <- tbl(conn, dbplyr::in_schema("SalesLT", "Address")) %>% collect
View(address)
# tidy up ----------------------------------------------------------------------
DBI::dbDisconnect(conn)
rm(list=ls())
rm(list=ls())
rJava::.jinit(parameters = "-Xmx1g")
library(RJDBC)
library(dplyr)
# connect to SQL Server --------------------------------------------------------
ip <- "database"
p <- "jar/mssql-jdbc-8.4.1.jre8.jar"
drv <- RJDBC::JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver" , p)
conn <- DBI::dbConnect(
drv,
sprintf(
"jdbc:sqlserver://%s:%d;databaseName=%s;username=%s;password=%s",
ip, 1433, "adventureworks", "sa", "password-1234"
)
)
# extract address table --------------------------------------------------------
address <- tbl(conn, dbplyr::in_schema("SalesLT", "Address")) %>% collect
View(address)
# make test dataset ------------------------------------------------------------
n <- 100000
years <- 2015:2020
bins <- 10
dt <- data.table(
year = rep(years, each = n),
id = rep(1:n, length(years)),
g1 = ceiling(runif(n * length(years)) * 2),
g2 = ceiling(runif(n * length(years)) * 5),
ind = do.call(
cbind,
lapply(
rep(n, length(years)),
function(x) as(runif(x) <= 0.1, "integer")
)
),
X = do.call(
cbind,
lapply(
rep(n, length(years)),
function(x) rnorm(x, 100))
)
)
library(data.table)
dt <- data.table(
year = rep(years, each = n),
id = rep(1:n, length(years)),
g1 = ceiling(runif(n * length(years)) * 2),
g2 = ceiling(runif(n * length(years)) * 5),
ind = do.call(
cbind,
lapply(
rep(n, length(years)),
function(x) as(runif(x) <= 0.1, "integer")
)
),
X = do.call(
cbind,
lapply(
rep(n, length(years)),
function(x) rnorm(x, 100))
)
)
View(dt)
setnames(
dt, colnames(dt), gsub(".V", "", colnames(dt), fixed = TRUE)
)
# summary via data.table -------------------------------------------------------
(t0 <- system.time({
res0 <- dt[, .(n = sum(ind1)), by = list(year, g1)]
}))
res0
system.time({
DBI::dbWriteTable(conn, "test", dt)
})
# summary via SQL Server -------------------------------------------------------
(t1 <- system.time({
res1 <- tbl(conn, "test") %>%
group_by(year, g1) %>%
summarise(n = sum(ind1)) %>%
arrange(year, g1) %>%
collect()
}))
# summary via SQL Server with columnstore index --------------------------------
query <- "create clustered index ic1 on test (year, id, g1, g2)"
DBI::dbSendQuery(conn, query)
(t2 <- system.time({
res2 <- tbl(conn, "test") %>%
group_by(year, g1) %>%
summarise(n = sum(ind1)) %>%
arrange(year, g1) %>%
collect()
}))
t1
t2
# tidy up ----------------------------------------------------------------------
DBI::dbSendQuery(conn, "drop table test")
DBI::dbDisconnect(conn)
rm(list=ls())
rJava::.jinit(parameters = "-Xmx1g")
library(RJDBC)
if (!require(dbplyr)) renv::install("dbplyr")
library(dplyr)
library(data.table)
# connect to SQL Server --------------------------------------------------------
ip <- "database"
p <- "jar/mssql-jdbc-8.4.1.jre8.jar"
drv <- RJDBC::JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver" , p)
conn <- DBI::dbConnect(
drv,
sprintf(
"jdbc:sqlserver://%s:%d;databaseName=%s;username=%s;password=%s",
ip, 1433, "tempdb", "sa", "password-1234"
)
)
# test the connection
cat(DBI::dbGetQuery(conn, "select @@version")[1,1])
# make test dataset ------------------------------------------------------------
n <- 100000
years <- 2015:2020
bins <- 10
dt <- data.table(
year = rep(years, each = n),
id = rep(1:n, length(years)),
g1 = ceiling(runif(n * length(years)) * 2),
g2 = ceiling(runif(n * length(years)) * 5),
ind = do.call(
cbind,
lapply(
rep(n, length(years)),
function(x) as(runif(x) <= 0.1, "integer")
)
),
X = do.call(
cbind,
lapply(
rep(n, length(years)),
function(x) rnorm(x, 100))
)
)
setnames(
dt, colnames(dt), gsub(".V", "", colnames(dt), fixed = TRUE)
)
# summary via data.table -------------------------------------------------------
(t0 <- system.time({
res0 <- dt[, .(n = sum(ind1)), by = list(year, g1)]
}))
# write to SQL Server ----------------------------------------------------------
system.time({
DBI::dbWriteTable(conn, "test", dt)
})
# summary via SQL Server -------------------------------------------------------
(t1 <- system.time({
res1 <-  DBI::dbGetQuery(
conn,
"
SELECT
year, g1, sum(ind1) as n
FROM
test
GROUP BY
year, g1
ORDER BY
year, g1
"
)
}))
# summary via SQL Server with clustered index --------------------------------
query <- "create clustered index ic1 on test (year, id, g1, g2)"
DBI::dbSendQuery(conn, query)
(t2 <- system.time({
res2 <- DBI::dbGetQuery(
conn,
"
SELECT
year, g1, sum(ind1) as n
FROM
test
GROUP BY
year, g1
ORDER BY
year, g1
"
)
}))
# summary via SQL Server with columnstore index --------------------------------
query <- "create clustered columnstore index ic1 on test with (drop_existing = ON)"
DBI::dbSendQuery(conn, query)
(t3 <- system.time({
res3 <-  DBI::dbGetQuery(
conn,
"
SELECT
year, g1, sum(ind1) as n
FROM
test
GROUP BY
year, g1
ORDER BY
year, g1
"
)
}))
t0
t1
t2
t3
# tidy up ----------------------------------------------------------------------
DBI::dbSendQuery(conn, "drop table test")
DBI::dbDisconnect(conn)
rm(list=ls())
